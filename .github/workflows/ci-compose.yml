name: CI/CD (Docker Compose)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  APP_IMAGE: ${{ vars.APP_IMAGE || 'movieflix-app' }}
  NGINX_IMAGE: ${{ vars.NGINX_IMAGE || 'movieflix-nginx' }}
  ETL_IMAGE: ${{ vars.ETL_IMAGE || 'movieflix-etl' }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ---------- BUILD IMAGENS ----------
      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: false
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:ci

      - name: Build nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: false
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:ci

      - name: Build etl image
        uses: docker/build-push-action@v5
        with:
          context: ./etl
          push: false
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:ci

      # ---------- TESTE DE INTEGRAÇÃO ----------
      - name: Start services (app + nginx) for integration test
        run: |
          # rede para os containers
          docker network create movieflix-ci || true

          # subir app
          docker run -d --rm --name app_test --network movieflix-ci \
            -e PORT=8000 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:ci

          # subir nginx apontando para hostname "app"
          docker run -d --rm --name nginx_test --network movieflix-ci -p 8080:80 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:ci

          # aguardar o app responder
          for i in {1..20}; do
            sleep 1
            if curl -fsS http://localhost:8080/health | grep -q '"ok"'; then
              echo "App OK"; exit 0
            fi
          done
          echo "Falha ao validar /health via Nginx"
          exit 1

      - name: Stop test containers
        if: always()
        run: |
          docker rm -f nginx_test || true
          docker rm -f app_test || true
          docker network rm movieflix-ci || true

      # ---------- PUSH (apenas na main) ----------
      - name: Push app image (latest + sha)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:ci ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:latest
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:ci ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE }}:${{ github.sha }}

      - name: Push nginx image (latest + sha)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:ci ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:latest
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:ci ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.NGINX_IMAGE }}:${{ github.sha }}

      - name: Push etl image (latest + sha)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:ci ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:latest
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:ci ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ETL_IMAGE }}:${{ github.sha }}
